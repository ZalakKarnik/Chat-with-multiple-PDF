# -*- coding: utf-8 -*-
"""Chat_With_PDF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vLCEid8x8wbQD3RNdV9idbxPJqYp1aiG
"""

!pip install streamlit langchain google-generativeai PyPDF2 faiss-cpu python-dotenv


!pip install langchain_google_genai

!pip install langchain_community

!pip install streamlit google-generativeai langchain PyPDF2

import os
from google.colab import files
from PyPDF2 import PdfReader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_google_genai import GoogleGenerativeAIEmbeddings, ChatGoogleGenerativeAI
from langchain.vectorstores import FAISS
from langchain.chains.question_answering import load_qa_chain
from langchain.prompts import PromptTemplate
import google.generativeai as genai

# Configure API key
os.environ["GOOGLE_API_KEY"] = "your-api-key"
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# Upload PDF files
uploaded = files.upload()

# Step 1: Extract Text from PDF
def extract_text_from_pdfs(uploaded_files):
    text = ""
    for filename in uploaded_files:
        pdf_reader = PdfReader(filename)
        for page in pdf_reader.pages:
            text += page.extract_text()
    return text

# Step 2: Split Text into Chunks
def get_text_chunks(text):
    splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
    return splitter.split_text(text)

# Step 3: Create a Vector Store
def create_vector_store(chunks):
    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
    vector_store = FAISS.from_texts(chunks, embedding=embeddings)
    vector_store.save_local("faiss_index")
    return vector_store

# Step 4: Load Conversational Chain
def get_conversational_chain():
    prompt_template = """
    Answer the question as detailed as possible from the provided context.
    If the answer is not in the context, say "Answer is not available in the context."
    Context: {context}
    Question: {question}
    """
    model = ChatGoogleGenerativeAI(model="gemini-pro", temperature=0.3)
    prompt = PromptTemplate(template=prompt_template, input_variables=["context", "question"])
    return load_qa_chain(model, chain_type="stuff", prompt=prompt)

# Step 5: Answer Questions
def answer_question(question, vector_store, chain):
    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
    db = FAISS.load_local("faiss_index", embeddings, allow_dangerous_deserialization=True)
    docs = db.similarity_search(question)
    response = chain({"input_documents": docs, "question": question}, return_only_outputs=True)
    return response["output_text"]

# Main Logic
raw_text = extract_text_from_pdfs(uploaded.keys())
text_chunks = get_text_chunks(raw_text)
vector_store = create_vector_store(text_chunks)
qa_chain = get_conversational_chain()

# User Interaction
while True:
    user_question = input("Ask a question about the PDF: ")
    if user_question.lower() in ["exit", "quit"]:
        print("Exiting. Thank you!")
        break
    response = answer_question(user_question, vector_store, qa_chain)
    print("Answer:", response)

